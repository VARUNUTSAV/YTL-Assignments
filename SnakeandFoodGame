import java.util.LinkedList;

public class SnakeandFoodGame {

    enum CellType{
        FOOD,
        EMPTY
    }
    public static class Cell{
        private final int row, col;
        private CellType cellType;

        public Cell(int row, int col){
            this.row = row;
            this.col = col;
        }
        public void setCellType(CellType cellType){
            this.cellType = cellType;
        }
        public CellType getCellType(){
            return cellType;
        }
        public int getRow(){
            return row;
        }
        public int getCol(){
            return col;
        }
    }

    public static class Board{
        public final int rowCount, colCount;
        private Cell[][] board;

        public Board(int rowCount, int colCount){
            this.rowCount = rowCount;
            this.colCount = colCount;

            board = new Cell[rowCount][colCount];

            for(int i = 0 ; i < rowCount ; i++){
                for(int j = 0 ; j < colCount ; j++){
                    board[i][j] = new Cell(i, j);
                }
            }
        }
        public Cell[][] getBoard(){
            return board;
        }
        public void setBoard(Cell[][] board){
            this.board = board;
        }
        public void generateFood(){
            int row = (int)(Math.random()*rowCount);
            int col = (int)(Math.random()*colCount);

            board[row][col].setCellType(CellType.FOOD);

            System.out.print("Food generated at position - ");
            System.out.println(row + "," + col);
        }

    }
    public static class Snake{
        private LinkedList<Cell> snakeList = new LinkedList<>();
        private Cell head;
        private int len;

        public Snake(Cell initPos, int len){
            this.len = len;
            head = initPos;
            snakeList.add(head);
        }
        public void grow(){
            snakeList.add(head);
            len += 1;
        }
        public void move(Cell nextCell){
            head = nextCell;
            snakeList.add(head);
            Cell tail = snakeList.removeLast();
            tail.setCellType(CellType.EMPTY);
            System.out.println("Snake is going to - [" + nextCell.getRow() + "," + nextCell.getCol() + "]");
        }
        public boolean checkCrash(Cell nextCell){
            System.out.println("Checking for crash ");
            for(Cell cell : snakeList){
                if(cell == nextCell) return true;
            }
            return false;
        }
        public LinkedList<Cell> getSnakeList(){
            return snakeList;
        }
        public void setSnakeList(LinkedList<Cell> list){
            snakeList = list;
        }
        public Cell getHead(){
            return head;
        }
        public void setHead(Cell head){
            this.head = head;
        }
        public int getLen(){
            return len;
        }
        public void setLen(int val){
            len = val;
        }
    }

    public static final int DIRECTION_NONE = 0, DIRECTION_RIGHT = 1,
            DIRECTION_LEFT = -1, DIRECTION_UP = 2, DIRECTION_DOWN = -2;
    public static class Game {
        // Initializing board and snake................
        private Board gameboard;
        private Snake snake;

        private int direction;
        private boolean gameOver;

        public Game(Snake snake, Board board) {
            this.snake = snake;
            gameboard = board;
        }

        public Snake getSnake() {
            return snake;
        }

        public void setSnake(Snake snake) {
            this.snake = snake;
        }

        public Board getBoard() {
            return gameboard;
        }

        public void setBoard(Board gameboard) {
            this.gameboard = gameboard;
        }

        public boolean isGameOver() {
            return gameOver;
        }

        public void setGameOver(boolean gameOver) {
            this.gameOver = gameOver;
        }

        public int getDirection() {
            return direction;
        }

        public void setDirection(int direction) {
            this.direction = direction;
        }

        public void update() {
            System.out.println("Going to update the game");
            if (!gameOver) {
                if (direction != DIRECTION_NONE) {
                    Cell nextCell = getNextCell(snake.getHead());

                    if (snake.checkCrash(nextCell)) {
                        setDirection(DIRECTION_NONE);
                        gameOver = true;
                    } else {
                        snake.move(nextCell);
                        if (nextCell.getCellType() == CellType.FOOD) {
                            snake.grow();
                            gameboard.generateFood();
                        }
                    }
                }
            }
        }

        private Cell getNextCell(Cell currPosition) {
            System.out.println("Going to find next cell");
            int row = currPosition.getRow();
            int col = currPosition.getCol();

            if (direction == DIRECTION_RIGHT) {
                col++;
            } else if (direction == DIRECTION_LEFT) {
                col--;
            } else if (direction == DIRECTION_UP) {
                row--;
            } else if (direction == DIRECTION_DOWN) {
                row++;
            }

            Cell nextCell = gameboard.getBoard()[row][col];

            return nextCell;
        }
    }

    public static void main(String[] args)
    {

        System.out.println("Going to start game");

        Cell initPos = new Cell(0, 0);
        Snake initSnake = new Snake(initPos,0);
        Board board = new Board(10, 10);
        Game newGame = new Game(initSnake, board);
        newGame.gameOver = false;
        newGame.direction = DIRECTION_RIGHT;

        // We need to update the game at regular intervals,

        for (int i = 0; i < 5; i++) {
            if (i == 2)
                newGame.gameboard.generateFood();
            newGame.update();
            if (i == 3)
                newGame.direction = DIRECTION_RIGHT;
            if (newGame.gameOver == true)
                break;
        }
    }

}
