import java.io.*;
import java.util.*;

public class Assign_1 {

    public static Map<Integer, Integer> countOccurrence(ArrayList<Integer> arr) {
        Map<Integer, Integer> ans = new HashMap<Integer, Integer>();
        int k = 0, v = 0;
        for(int i = 0 ; i < arr.size();  i++) {
            k = arr.get(i);
            if(ans.containsKey(k)) ans.put(k, ans.get(k) + 1);
            else ans.put(k, 1);
        }

        return ans;
    }

    public static Map<Integer, Integer> uniqueElements(ArrayList<Integer> arr){
        Map<Integer, Integer> fmap = countOccurrence(arr);
        Map<Integer, Integer> ans = new HashMap<Integer, Integer>();

        Iterator<Map.Entry<Integer, Integer>> iterator = fmap.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Integer, Integer> entry = iterator.next();
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            if(value == 1) ans.put(key, value);
        }

        return ans;
    }

    public static ArrayList<Long> nextGreater(ArrayList<Long> arr){
        Integer n  = arr.size();
        ArrayList<Long> v = new ArrayList<>(Collections.nCopies(n, -1L));

        Long mx = arr.get(n - 1);

        // Iterate over the array from right to left.
        for (int i = n - 2; i >= 0; i--) {
            if (arr.get(i + 1) > arr.get(i)) {
                v.set(i, arr.get(i + 1));
            }
            else {
                if (v.get(i + 1) > arr.get(i)) {
                    v.set(i, v.get(i + 1));
                }
                else if (mx > arr.get(i)) {
                    int k = i + 1;
                    while (arr.get(k) <= arr.get(i)) {
                        k++;
                    }
                    v.set(i, arr.get(k));
                }
                else {
                    v.set(i, -1L);
                }
            }
            mx = Math.max(arr.get(i), mx);
        }
        return v;
    }

    public static void bubbleSort(ArrayList<Integer> arr){
        Integer a = 0, b = 0;
        boolean flag = false;
        for(int i = 0 ; i < arr.size()-1 ; i++){
            flag = false;
            for(int j = 0 ; j < arr.size()-i-1 ; j++){
                a = arr.get(j);
                b = arr.get(j+1);
                if(a > b){
                    arr.add(j, b);
                    arr.add(j+1, a);
                    flag = true;
                }
            }
            if(flag == false) {
                break;
            }
        }

    }

    public static int lswrc(String str){
        int n = str.length();
        int ans = 0;

        for(int i = 0; i < n; i++)
        {
            boolean[] vis = new boolean[256];

            for(int j = i; j < n; j++)
            {

                if (vis[str.charAt(j)] == true)
                    break;

                else
                {
                    ans = Math.max(ans, j - i + 1);
                    vis[str.charAt(j)] = true;
                }
            }
            vis[str.charAt(i)] = false;
        }
        return ans;
    }

    public static void main(String[] args) {

        ArrayList<Integer> al = new ArrayList<Integer>();

        al.add(1);
        al.add(2);
        al.add(1);
        al.add(3);
        al.add(4);
        al.add(3);
        al.add(1);
//        [1, 2, 1, 3, 4, 3, 1]

//        Map<Integer, Integer> map = countOccurrence(al);
//        System.out.println(map);
//        map = uniqueElements(al);
//        System.out.println(map);
//
//        ArrayList<Long> arr = new ArrayList<Long>();
//        arr.add(1L);
//        arr.add(2L);
//        arr.add(1L);
//        arr.add(3L);
//        arr.add(4L);
//        arr.add(3L);
//        arr.add(1L);
//        ArrayList<Long> ng = nextGreater(arr);
//        for(int i = 0 ; i < al.size() ; i++)  System.out.println(ng.get(i) );
//        bubbleSort(al);
//        for (Integer integer : al) System.out.println(integer);

        System.out.println(lswrc("ABDEFGABEF"));
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.*;
public class Anagram{
    private static String findKey(String s){
        ArrayList<Character> arr = new ArrayList<>();
        for(int i = 0; i < s.length(); i++){
            arr.add(s.charAt(i));
        }
        Collections.sort(arr);
        String ans = "";
        for(Character ch : arr){
            ans+=ch;
        }
        return ans;
    }
    public static void main(String[] args){
        ArrayList<String> arr = new ArrayList<>();
        arr.add("cat");
        arr.add("tac");
        arr.add("dog");
        arr.add("act");
        arr.add("god");
        arr.add("tca");

        Map<String,ArrayList<String>> anagrams = new HashMap<>();
        for(String s : arr){
            String str = findKey(s);
            if(anagrams.containsKey(str)){
                anagrams.get(str).add(s);
            }else{
                ArrayList<String> list = new ArrayList<>();
                list.add(s);
                anagrams.put(str,list);
            }
        }
        for(Map.Entry<String,ArrayList<String>> mapElement : anagrams.entrySet()){
            System.out.println(mapElement.getValue());
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void print_N_mostFrequentNumber(int[] arr, int N,
                                           int K)
    {
 
        Map<Integer, Integer> map
            = new HashMap<Integer, Integer>();

        for (int i = 0; i < N; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
 
        List<Map.Entry<Integer, Integer> > list
            = new ArrayList<Map.Entry<Integer, Integer> >(
                map.entrySet());
 
        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer> >() {
                public int compare(
                    Map.Entry<Integer, Integer> o1,
                    Map.Entry<Integer, Integer> o2)
                {
                    if (o1.getValue() == o2.getValue())
                        return o2.getKey() - o1.getKey();
                    else
                        return o2.getValue() - o1.getValue();
                }
            });
 
        for (int i = 0; i < K; i++)
            System.out.print(list.get(i).getKey() + " ");
    }
